Асинхронные методы могут иметь следующие типы возвращаемых значений:

    Task для асинхронного метода, который выполняет операцию, но не возвращает значение.
    Task<TResult> для асинхронного метода, возвращающего значение.
    void для обработчика событий.
    Любой тип, имеющий доступный GetAwaiter метод. Объект, возвращаемый методом GetAwaiter, должен реализовывать интерфейс System.Runtime.CompilerServices.ICriticalNotifyCompletion.
    IAsyncEnumerable<T>для асинхронного метода, возвращающего асинхронный поток.

Дополнительные сведения об асинхронных методах см. в разделе Асинхронное программирование с использованием ключевых слов async и await (C#).

Существуют также некоторые другие типы, характерные для рабочих нагрузок Windows.

    DispatcherOperation для асинхронных операций, ограниченных Windows.
    IAsyncAction для асинхронных действий в UWP, которые не возвращают значение.
    IAsyncActionWithProgress<TProgress> для асинхронных действий в UWP, которые сообщают о ходе выполнения, но не возвращают значение.
    IAsyncOperation<TResult> для асинхронных операций в UWP, возвращающих значение.
    IAsyncOperationWithProgress<TResult,TProgress> для асинхронных операций в UWP, которые сообщают о ходе выполнения и возвращают значение.

Тип возвращаемого значения Task

Асинхронные методы, не содержащие инструкцию return или содержащие инструкцию return, которая не возвращает операнд, обычно имеют тип возвращаемого значения Task. При синхронном выполнении такие методы возвращают void. Если для асинхронного метода вы используете тип возвращаемого значения Task, вызывающий метод может использовать оператор await для приостановки выполнения вызывающего объекта до завершения вызванного асинхронного метода.

В следующем примере метод WaitAndApologizeAsync не содержит инструкцию return, в связи с чем он возвращает объект Task. Возврат Task позволяет реализовать ожидание WaitAndApologizeAsync. Тип Task не имеет возвращаемого значения и, соответственно, не содержит свойство Result.